{"ast":null,"code":"var _jsxFileName = \"/home/dilip/Desktop/MERN/himalaya/src/components/useDemoConfig.js\";\nimport React from 'react'; //\n\nconst options = {\n  elementType: ['line', 'area', 'bar', 'bubble'],\n  primaryAxisType: ['linear', 'time', 'log', 'ordinal'],\n  secondaryAxisType: ['linear', 'time', 'log', 'ordinal'],\n  primaryAxisPosition: ['top', 'left', 'right', 'bottom'],\n  secondaryAxisPosition: ['top', 'left', 'right', 'bottom'],\n  secondaryAxisStack: [true, false],\n  primaryAxisShow: [true, false],\n  secondaryAxisShow: [true, false],\n  grouping: ['single', 'series', 'primary', 'secondary'],\n  tooltipAnchor: ['closest', 'top', 'bottom', 'left', 'right', 'center', 'gridTop', 'gridBottom', 'gridLeft', 'gridRight', 'gridCenter', 'pointer'],\n  tooltipAlign: ['auto', 'top', 'bottom', 'left', 'right', 'topLeft', 'topRight', 'bottomLeft', 'bottomRight', 'center'],\n  snapCursor: [true, false]\n};\nconst optionKeys = Object.keys(options);\nexport default function useChartConfig({\n  series,\n  useR,\n  show = [],\n  count = 1,\n  resizable = true,\n  canRandomize = true,\n  dataType = 'time',\n  elementType = 'line',\n  primaryAxisType = 'time',\n  secondaryAxisType = 'linear',\n  primaryAxisPosition = 'bottom',\n  secondaryAxisPosition = 'left',\n  primaryAxisStack = false,\n  secondaryAxisStack = true,\n  primaryAxisShow = true,\n  secondaryAxisShow = true,\n  tooltipAnchor = 'closest',\n  tooltipAlign = 'auto',\n  grouping = 'primary',\n  snapCursor = true,\n  datums = 10\n}) {\n  const [state, setState] = React.useState({\n    count,\n    resizable,\n    canRandomize,\n    dataType,\n    elementType,\n    primaryAxisType,\n    secondaryAxisType,\n    primaryAxisPosition,\n    secondaryAxisPosition,\n    primaryAxisStack,\n    secondaryAxisStack,\n    primaryAxisShow,\n    secondaryAxisShow,\n    tooltipAnchor,\n    tooltipAlign,\n    grouping,\n    snapCursor,\n    datums,\n    data: makeDataFrom(dataType, series, useR, datums)\n  });\n  React.useEffect(() => {\n    setState(old => ({ ...old,\n      data: makeDataFrom(dataType, series, useR, datums)\n    }));\n  }, [count, dataType, datums, series, useR]);\n\n  const randomizeData = () => setState(old => ({ ...old,\n    data: makeDataFrom(dataType, series, useR, datums)\n  }));\n\n  const Options = optionKeys.filter(option => show.indexOf(option) > -1).map(option => /*#__PURE__*/React.createElement(\"div\", {\n    key: option,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, option, \": \\xA0\", /*#__PURE__*/React.createElement(\"select\", {\n    value: state[option],\n    onChange: ({\n      target: {\n        value\n      }\n    }) => setState(old => ({ ...old,\n      [option]: typeof options[option][0] === 'boolean' ? value === 'true' : value\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, options[option].map(d => /*#__PURE__*/React.createElement(\"option\", {\n    value: d,\n    key: d.toString(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, d.toString()))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  })));\n  return { ...state,\n    randomizeData,\n    Options\n  };\n}\n\nfunction makeDataFrom(dataType, series, useR, datums) {\n  return [...new Array(series || Math.max(Math.round(Math.random() * 5), 1))].map((d, i) => makeSeries(i, dataType, useR, datums));\n}\n\nfunction makeSeries(i, dataType, useR, datums) {\n  const start = 0;\n  const startDate = new Date();\n  startDate.setMinutes(0);\n  startDate.setSeconds(0);\n  startDate.setMilliseconds(0); // const length = 5 + Math.round(Math.random() * 15)\n\n  const length = datums;\n  const min = 0;\n  const max = 100;\n  const rMin = 2;\n  const rMax = 20;\n  const nullChance = 0;\n  return {\n    label: `Series ${i + 1}`,\n    datums: [...new Array(length)].map((_, i) => {\n      let x = start + i;\n\n      if (dataType === 'ordinal') {\n        x = `Ordinal Group ${x}`;\n      }\n\n      if (dataType === 'time') {\n        x = new Date(startDate.getTime() + 60 * 1000 * 30 * i);\n      }\n\n      if (dataType === 'linear') {\n        x = Math.random() < nullChance ? null : min + Math.round(Math.random() * (max - min));\n      }\n\n      const distribution = 1.1;\n      const y = Math.random() < nullChance ? null : min + Math.round(Math.random() * (max - min));\n      const r = !useR ? undefined : rMax - Math.floor(Math.log(Math.random() * (distribution ** rMax - rMin) + rMin) / Math.log(distribution));\n      return {\n        x,\n        y,\n        r\n      };\n    })\n  };\n}","map":{"version":3,"sources":["/home/dilip/Desktop/MERN/himalaya/src/components/useDemoConfig.js"],"names":["React","options","elementType","primaryAxisType","secondaryAxisType","primaryAxisPosition","secondaryAxisPosition","secondaryAxisStack","primaryAxisShow","secondaryAxisShow","grouping","tooltipAnchor","tooltipAlign","snapCursor","optionKeys","Object","keys","useChartConfig","series","useR","show","count","resizable","canRandomize","dataType","primaryAxisStack","datums","state","setState","useState","data","makeDataFrom","useEffect","old","randomizeData","Options","filter","option","indexOf","map","target","value","d","toString","Array","Math","max","round","random","i","makeSeries","start","startDate","Date","setMinutes","setSeconds","setMilliseconds","length","min","rMin","rMax","nullChance","label","_","x","getTime","distribution","y","r","undefined","floor","log"],"mappings":"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","sourcesContent":["import React from 'react'\n//\n\nconst options = {\n  elementType: ['line', 'area', 'bar', 'bubble'],\n  primaryAxisType: ['linear', 'time', 'log', 'ordinal'],\n  secondaryAxisType: ['linear', 'time', 'log', 'ordinal'],\n  primaryAxisPosition: ['top', 'left', 'right', 'bottom'],\n  secondaryAxisPosition: ['top', 'left', 'right', 'bottom'],\n  secondaryAxisStack: [true, false],\n  primaryAxisShow: [true, false],\n  secondaryAxisShow: [true, false],\n  grouping: ['single', 'series', 'primary', 'secondary'],\n  tooltipAnchor: [\n    'closest',\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'center',\n    'gridTop',\n    'gridBottom',\n    'gridLeft',\n    'gridRight',\n    'gridCenter',\n    'pointer'\n  ],\n  tooltipAlign: [\n    'auto',\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'topLeft',\n    'topRight',\n    'bottomLeft',\n    'bottomRight',\n    'center'\n  ],\n  snapCursor: [true, false]\n}\n\nconst optionKeys = Object.keys(options)\n\nexport default function useChartConfig({\n  series,\n  useR,\n  show = [],\n  count = 1,\n  resizable = true,\n  canRandomize = true,\n  dataType = 'time',\n  elementType = 'line',\n  primaryAxisType = 'time',\n  secondaryAxisType = 'linear',\n  primaryAxisPosition = 'bottom',\n  secondaryAxisPosition = 'left',\n  primaryAxisStack = false,\n  secondaryAxisStack = true,\n  primaryAxisShow = true,\n  secondaryAxisShow = true,\n  tooltipAnchor = 'closest',\n  tooltipAlign = 'auto',\n  grouping = 'primary',\n  snapCursor = true,\n  datums = 10\n}) {\n  const [state, setState] = React.useState({\n    count,\n    resizable,\n    canRandomize,\n    dataType,\n    elementType,\n    primaryAxisType,\n    secondaryAxisType,\n    primaryAxisPosition,\n    secondaryAxisPosition,\n    primaryAxisStack,\n    secondaryAxisStack,\n    primaryAxisShow,\n    secondaryAxisShow,\n    tooltipAnchor,\n    tooltipAlign,\n    grouping,\n    snapCursor,\n    datums,\n    data: makeDataFrom(dataType, series, useR, datums)\n  })\n\n  React.useEffect(() => {\n    setState(old => ({\n      ...old,\n      data: makeDataFrom(dataType, series, useR, datums)\n    }))\n  }, [count, dataType, datums, series, useR])\n\n  const randomizeData = () =>\n    setState(old => ({\n      ...old,\n      data: makeDataFrom(dataType, series, useR, datums)\n    }))\n\n  const Options = optionKeys\n    .filter(option => show.indexOf(option) > -1)\n    .map(option => (\n      <div key={option}>\n        {option}: &nbsp;\n        <select\n          value={state[option]}\n          onChange={({ target: { value } }) =>\n            setState(old => ({\n              ...old,\n              [option]:\n                typeof options[option][0] === 'boolean'\n                  ? value === 'true'\n                  : value\n            }))\n          }\n        >\n          {options[option].map(d => (\n            <option value={d} key={d.toString()}>\n              {d.toString()}\n            </option>\n          ))}\n        </select>\n        <br />\n      </div>\n    ))\n\n  return {\n    ...state,\n    randomizeData,\n    Options\n  }\n}\n\nfunction makeDataFrom(dataType, series, useR, datums) {\n  return [\n    ...new Array(series || Math.max(Math.round(Math.random() * 5), 1))\n  ].map((d, i) => makeSeries(i, dataType, useR, datums))\n}\n\nfunction makeSeries(i, dataType, useR, datums) {\n  const start = 0\n  const startDate = new Date()\n  startDate.setMinutes(0)\n  startDate.setSeconds(0)\n  startDate.setMilliseconds(0)\n  // const length = 5 + Math.round(Math.random() * 15)\n  const length = datums\n  const min = 0\n  const max = 100\n  const rMin = 2\n  const rMax = 20\n  const nullChance = 0\n  return {\n    label: `Series ${i + 1}`,\n    datums: [...new Array(length)].map((_, i) => {\n      let x = start + i\n      if (dataType === 'ordinal') {\n        x = `Ordinal Group ${x}`\n      }\n      if (dataType === 'time') {\n        x = new Date(startDate.getTime() + 60 * 1000 * 30 * i)\n      }\n      if (dataType === 'linear') {\n        x =\n          Math.random() < nullChance\n            ? null\n            : min + Math.round(Math.random() * (max - min))\n      }\n      const distribution = 1.1\n      const y =\n        Math.random() < nullChance\n          ? null\n          : min + Math.round(Math.random() * (max - min))\n      const r = !useR\n        ? undefined\n        : rMax -\n          Math.floor(\n            Math.log(Math.random() * (distribution ** rMax - rMin) + rMin) /\n              Math.log(distribution)\n          )\n      return {\n        x,\n        y,\n        r\n      }\n    })\n  }\n}"]},"metadata":{},"sourceType":"module"}