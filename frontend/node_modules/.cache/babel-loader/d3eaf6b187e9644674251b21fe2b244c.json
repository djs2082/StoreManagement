{"ast":null,"code":"var _jsxFileName = \"/home/dilip/Desktop/MERN/himalayafinal/src/components/statistics3.component.js\";\nimport React, { Component } from 'react';\nimport Chart from \"react-google-charts\"; // or\n// import { Chart } from \"react-google-charts\";\n// // or\n// const { Chart } = require(\"react-google-charts\");\n// // or\n// var Chart = require(\"react-google-charts\").Chart;\n\nclass Graph extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        maxWidth: 900\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(Chart, {\n      width: 400,\n      height: 300,\n      chartType: \"ColumnChart\",\n      loader: /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 13\n        }\n      }, \"Loading Chart\"),\n      data: [['City', '2010 Population', '2000 Population'], ['New York City, NY', 8175000, 8008000], ['Los Angeles, CA', 3792000, 3694000], ['Chicago, IL', 2695000, 2896000], ['Houston, TX', 2099000, 1953000], ['Philadelphia, PA', 1526000, 1517000]],\n      options: {\n        title: 'Population of Largest U.S. Cities',\n        chartArea: {\n          width: '30%'\n        },\n        hAxis: {\n          title: 'Total Population',\n          minValue: 0\n        },\n        vAxis: {\n          title: 'City'\n        }\n      },\n      legendToggle: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 3\n      }\n    }), /*#__PURE__*/React.createElement(Chart, {\n      width: 400,\n      height: '300px',\n      chartType: \"AreaChart\",\n      loader: /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }\n      }, \"Loading Chart\"),\n      data: [['Year', 'Sales', 'Expenses'], ['2013', 1000, 400], ['2014', 1170, 460], ['2015', 660, 1120], ['2016', 1030, 540]],\n      options: {\n        title: 'Company Performance',\n        hAxis: {\n          title: 'Year',\n          titleTextStyle: {\n            color: '#333'\n          }\n        },\n        vAxis: {\n          minValue: 0\n        },\n        // For the legend to fit, we make the chart area smaller\n        chartArea: {\n          width: '50%',\n          height: '70%'\n        } // lineWidth: 25\n\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 3\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(Chart, {\n      width: 400,\n      height: '300px',\n      chartType: \"BubbleChart\",\n      loader: /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }\n      }, \"Loading Chart\"),\n      data: [['ID', 'Life Expectancy', 'Fertility Rate', 'Region', 'Population'], ['CAN', 80.66, 1.67, 'North America', 33739900], ['DEU', 79.84, 1.36, 'Europe', 81902307], ['DNK', 78.6, 1.84, 'Europe', 5523095], ['EGY', 72.73, 2.78, 'Middle East', 79716203], ['GBR', 80.05, 2, 'Europe', 61801570], ['IRN', 72.49, 1.7, 'Middle East', 73137148], ['IRQ', 68.09, 4.77, 'Middle East', 31090763], ['ISR', 81.55, 2.96, 'Middle East', 7485600], ['RUS', 68.6, 1.54, 'Europe', 141850000], ['USA', 78.09, 2.05, 'North America', 307007000]],\n      options: {\n        title: 'Correlation between life expectancy, fertility rate ' + 'and population of some world countries (2010)',\n        hAxis: {\n          title: 'Life Expectancy'\n        },\n        vAxis: {\n          title: 'Fertility Rate'\n        },\n        bubble: {\n          textStyle: {\n            fontSize: 11\n          }\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 3\n      }\n    }), /*#__PURE__*/React.createElement(Chart, {\n      width: 400,\n      height: 300,\n      chartType: \"LineChart\",\n      loader: /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }\n      }, \"Loading Chart\"),\n      data: [[{\n        type: 'number',\n        label: 'x'\n      }, {\n        type: 'number',\n        label: 'values'\n      }, {\n        id: 'i0',\n        type: 'number',\n        role: 'interval'\n      }, {\n        id: 'i1',\n        type: 'number',\n        role: 'interval'\n      }, {\n        id: 'i2',\n        type: 'number',\n        role: 'interval'\n      }, {\n        id: 'i2',\n        type: 'number',\n        role: 'interval'\n      }, {\n        id: 'i2',\n        type: 'number',\n        role: 'interval'\n      }, {\n        id: 'i2',\n        type: 'number',\n        role: 'interval'\n      }], [1, 100, 90, 110, 85, 96, 104, 120], [2, 120, 95, 130, 90, 113, 124, 140], [3, 130, 105, 140, 100, 117, 133, 139], [4, 90, 85, 95, 85, 88, 92, 95], [5, 70, 74, 63, 67, 69, 70, 72], [6, 30, 39, 22, 21, 28, 34, 40], [7, 80, 77, 83, 70, 77, 85, 90], [8, 100, 90, 110, 85, 95, 102, 110]],\n      options: {\n        intervals: {\n          style: 'sticks'\n        },\n        legend: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 3\n      }\n    })));\n  }\n\n}\n\nexport default Graph;","map":{"version":3,"sources":["/home/dilip/Desktop/MERN/himalayafinal/src/components/statistics3.component.js"],"names":["React","Component","Chart","Graph","constructor","props","render","display","maxWidth","title","chartArea","width","hAxis","minValue","vAxis","titleTextStyle","color","height","bubble","textStyle","fontSize","type","label","id","role","intervals","style","legend"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,OAAOC,KAAP,MAAkB,qBAAlB,C,CACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,KAAN,SAAoBF,SAApB,CACA;AACIG,EAAAA,WAAW,CAACC,KAAD,EACX;AACI,UAAMA,KAAN;AACH;;AACDC,EAAAA,MAAM,GACN;AACI,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACZ;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,OAAO,EAAE,MAAX;AAAmBC,QAAAA,QAAQ,EAAE;AAA7B,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AACE,MAAA,KAAK,EAAE,GADT;AAEE,MAAA,MAAM,EAAE,GAFV;AAGE,MAAA,SAAS,EAAC,aAHZ;AAIE,MAAA,MAAM,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAJV;AAKE,MAAA,IAAI,EAAE,CACJ,CAAC,MAAD,EAAS,iBAAT,EAA4B,iBAA5B,CADI,EAEJ,CAAC,mBAAD,EAAsB,OAAtB,EAA+B,OAA/B,CAFI,EAGJ,CAAC,iBAAD,EAAoB,OAApB,EAA6B,OAA7B,CAHI,EAIJ,CAAC,aAAD,EAAgB,OAAhB,EAAyB,OAAzB,CAJI,EAKJ,CAAC,aAAD,EAAgB,OAAhB,EAAyB,OAAzB,CALI,EAMJ,CAAC,kBAAD,EAAqB,OAArB,EAA8B,OAA9B,CANI,CALR;AAaE,MAAA,OAAO,EAAE;AACPC,QAAAA,KAAK,EAAE,mCADA;AAEPC,QAAAA,SAAS,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAFJ;AAGPC,QAAAA,KAAK,EAAE;AACLH,UAAAA,KAAK,EAAE,kBADF;AAELI,UAAAA,QAAQ,EAAE;AAFL,SAHA;AAOPC,QAAAA,KAAK,EAAE;AACLL,UAAAA,KAAK,EAAE;AADF;AAPA,OAbX;AAwBE,MAAA,YAAY,MAxBd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eA2BE,oBAAC,KAAD;AACE,MAAA,KAAK,EAAE,GADT;AAEE,MAAA,MAAM,EAAE,OAFV;AAGE,MAAA,SAAS,EAAC,WAHZ;AAIE,MAAA,MAAM,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAJV;AAKE,MAAA,IAAI,EAAE,CACJ,CAAC,MAAD,EAAS,OAAT,EAAkB,UAAlB,CADI,EAEJ,CAAC,MAAD,EAAS,IAAT,EAAe,GAAf,CAFI,EAGJ,CAAC,MAAD,EAAS,IAAT,EAAe,GAAf,CAHI,EAIJ,CAAC,MAAD,EAAS,GAAT,EAAc,IAAd,CAJI,EAKJ,CAAC,MAAD,EAAS,IAAT,EAAe,GAAf,CALI,CALR;AAYE,MAAA,OAAO,EAAE;AACPA,QAAAA,KAAK,EAAE,qBADA;AAEPG,QAAAA,KAAK,EAAE;AAAEH,UAAAA,KAAK,EAAE,MAAT;AAAiBM,UAAAA,cAAc,EAAE;AAAEC,YAAAA,KAAK,EAAE;AAAT;AAAjC,SAFA;AAGPF,QAAAA,KAAK,EAAE;AAAED,UAAAA,QAAQ,EAAE;AAAZ,SAHA;AAIP;AACAH,QAAAA,SAAS,EAAE;AAAEC,UAAAA,KAAK,EAAE,KAAT;AAAgBM,UAAAA,MAAM,EAAE;AAAxB,SALJ,CAMP;;AANO,OAZX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3BF,CADY,eAkDZ;AAAK,MAAA,KAAK,EAAE;AAAEV,QAAAA,OAAO,EAAE;AAAX,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AACE,MAAA,KAAK,EAAE,GADT;AAEE,MAAA,MAAM,EAAE,OAFV;AAGE,MAAA,SAAS,EAAC,aAHZ;AAIE,MAAA,MAAM,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAJV;AAKE,MAAA,IAAI,EAAE,CACJ,CAAC,IAAD,EAAO,iBAAP,EAA0B,gBAA1B,EAA4C,QAA5C,EAAsD,YAAtD,CADI,EAEJ,CAAC,KAAD,EAAQ,KAAR,EAAe,IAAf,EAAqB,eAArB,EAAsC,QAAtC,CAFI,EAGJ,CAAC,KAAD,EAAQ,KAAR,EAAe,IAAf,EAAqB,QAArB,EAA+B,QAA/B,CAHI,EAIJ,CAAC,KAAD,EAAQ,IAAR,EAAc,IAAd,EAAoB,QAApB,EAA8B,OAA9B,CAJI,EAKJ,CAAC,KAAD,EAAQ,KAAR,EAAe,IAAf,EAAqB,aAArB,EAAoC,QAApC,CALI,EAMJ,CAAC,KAAD,EAAQ,KAAR,EAAe,CAAf,EAAkB,QAAlB,EAA4B,QAA5B,CANI,EAOJ,CAAC,KAAD,EAAQ,KAAR,EAAe,GAAf,EAAoB,aAApB,EAAmC,QAAnC,CAPI,EAQJ,CAAC,KAAD,EAAQ,KAAR,EAAe,IAAf,EAAqB,aAArB,EAAoC,QAApC,CARI,EASJ,CAAC,KAAD,EAAQ,KAAR,EAAe,IAAf,EAAqB,aAArB,EAAoC,OAApC,CATI,EAUJ,CAAC,KAAD,EAAQ,IAAR,EAAc,IAAd,EAAoB,QAApB,EAA8B,SAA9B,CAVI,EAWJ,CAAC,KAAD,EAAQ,KAAR,EAAe,IAAf,EAAqB,eAArB,EAAsC,SAAtC,CAXI,CALR;AAkBE,MAAA,OAAO,EAAE;AACPE,QAAAA,KAAK,EACH,yDACA,+CAHK;AAIPG,QAAAA,KAAK,EAAE;AAAEH,UAAAA,KAAK,EAAE;AAAT,SAJA;AAKPK,QAAAA,KAAK,EAAE;AAAEL,UAAAA,KAAK,EAAE;AAAT,SALA;AAMPS,QAAAA,MAAM,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAEC,YAAAA,QAAQ,EAAE;AAAZ;AAAb;AAND,OAlBX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eA4BE,oBAAC,KAAD;AACE,MAAA,KAAK,EAAE,GADT;AAEE,MAAA,MAAM,EAAE,GAFV;AAGE,MAAA,SAAS,EAAC,WAHZ;AAIE,MAAA,MAAM,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAJV;AAKE,MAAA,IAAI,EAAE,CACJ,CACE;AAAEC,QAAAA,IAAI,EAAE,QAAR;AAAkBC,QAAAA,KAAK,EAAE;AAAzB,OADF,EAEE;AAAED,QAAAA,IAAI,EAAE,QAAR;AAAkBC,QAAAA,KAAK,EAAE;AAAzB,OAFF,EAGE;AAAEC,QAAAA,EAAE,EAAE,IAAN;AAAYF,QAAAA,IAAI,EAAE,QAAlB;AAA4BG,QAAAA,IAAI,EAAE;AAAlC,OAHF,EAIE;AAAED,QAAAA,EAAE,EAAE,IAAN;AAAYF,QAAAA,IAAI,EAAE,QAAlB;AAA4BG,QAAAA,IAAI,EAAE;AAAlC,OAJF,EAKE;AAAED,QAAAA,EAAE,EAAE,IAAN;AAAYF,QAAAA,IAAI,EAAE,QAAlB;AAA4BG,QAAAA,IAAI,EAAE;AAAlC,OALF,EAME;AAAED,QAAAA,EAAE,EAAE,IAAN;AAAYF,QAAAA,IAAI,EAAE,QAAlB;AAA4BG,QAAAA,IAAI,EAAE;AAAlC,OANF,EAOE;AAAED,QAAAA,EAAE,EAAE,IAAN;AAAYF,QAAAA,IAAI,EAAE,QAAlB;AAA4BG,QAAAA,IAAI,EAAE;AAAlC,OAPF,EAQE;AAAED,QAAAA,EAAE,EAAE,IAAN;AAAYF,QAAAA,IAAI,EAAE,QAAlB;AAA4BG,QAAAA,IAAI,EAAE;AAAlC,OARF,CADI,EAWJ,CAAC,CAAD,EAAI,GAAJ,EAAS,EAAT,EAAa,GAAb,EAAkB,EAAlB,EAAsB,EAAtB,EAA0B,GAA1B,EAA+B,GAA/B,CAXI,EAYJ,CAAC,CAAD,EAAI,GAAJ,EAAS,EAAT,EAAa,GAAb,EAAkB,EAAlB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,CAZI,EAaJ,CAAC,CAAD,EAAI,GAAJ,EAAS,GAAT,EAAc,GAAd,EAAmB,GAAnB,EAAwB,GAAxB,EAA6B,GAA7B,EAAkC,GAAlC,CAbI,EAcJ,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,EAAhB,EAAoB,EAApB,EAAwB,EAAxB,EAA4B,EAA5B,CAdI,EAeJ,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,EAAhB,EAAoB,EAApB,EAAwB,EAAxB,EAA4B,EAA5B,CAfI,EAgBJ,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,EAAhB,EAAoB,EAApB,EAAwB,EAAxB,EAA4B,EAA5B,CAhBI,EAiBJ,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,EAAhB,EAAoB,EAApB,EAAwB,EAAxB,EAA4B,EAA5B,CAjBI,EAkBJ,CAAC,CAAD,EAAI,GAAJ,EAAS,EAAT,EAAa,GAAb,EAAkB,EAAlB,EAAsB,EAAtB,EAA0B,GAA1B,EAA+B,GAA/B,CAlBI,CALR;AAyBE,MAAA,OAAO,EAAE;AACPC,QAAAA,SAAS,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SADJ;AAEPC,QAAAA,MAAM,EAAE;AAFD,OAzBX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5BF,CAlDY,CADJ;AA6GM;;AApHd;;AAsHA,eAAexB,KAAf","sourcesContent":["import React,{Component} from 'react'\nimport Chart from \"react-google-charts\";\n// or\n// import { Chart } from \"react-google-charts\";\n// // or\n// const { Chart } = require(\"react-google-charts\");\n// // or\n// var Chart = require(\"react-google-charts\").Chart;\nclass Graph extends Component\n{\n    constructor(props)\n    {\n        super(props)\n    }\n    render()\n    {\n        return(\n            <div>\n<div style={{ display: 'flex', maxWidth: 900 }}>\n  <Chart\n    width={400}\n    height={300}\n    chartType=\"ColumnChart\"\n    loader={<div>Loading Chart</div>}\n    data={[\n      ['City', '2010 Population', '2000 Population'],\n      ['New York City, NY', 8175000, 8008000],\n      ['Los Angeles, CA', 3792000, 3694000],\n      ['Chicago, IL', 2695000, 2896000],\n      ['Houston, TX', 2099000, 1953000],\n      ['Philadelphia, PA', 1526000, 1517000],\n    ]}\n    options={{\n      title: 'Population of Largest U.S. Cities',\n      chartArea: { width: '30%' },\n      hAxis: {\n        title: 'Total Population',\n        minValue: 0,\n      },\n      vAxis: {\n        title: 'City',\n      },\n    }}\n    legendToggle\n  />\n  <Chart\n    width={400}\n    height={'300px'}\n    chartType=\"AreaChart\"\n    loader={<div>Loading Chart</div>}\n    data={[\n      ['Year', 'Sales', 'Expenses'],\n      ['2013', 1000, 400],\n      ['2014', 1170, 460],\n      ['2015', 660, 1120],\n      ['2016', 1030, 540],\n    ]}\n    options={{\n      title: 'Company Performance',\n      hAxis: { title: 'Year', titleTextStyle: { color: '#333' } },\n      vAxis: { minValue: 0 },\n      // For the legend to fit, we make the chart area smaller\n      chartArea: { width: '50%', height: '70%' },\n      // lineWidth: 25\n    }}\n  />\n</div>\n<div style={{ display: 'flex' }}>\n  <Chart\n    width={400}\n    height={'300px'}\n    chartType=\"BubbleChart\"\n    loader={<div>Loading Chart</div>}\n    data={[\n      ['ID', 'Life Expectancy', 'Fertility Rate', 'Region', 'Population'],\n      ['CAN', 80.66, 1.67, 'North America', 33739900],\n      ['DEU', 79.84, 1.36, 'Europe', 81902307],\n      ['DNK', 78.6, 1.84, 'Europe', 5523095],\n      ['EGY', 72.73, 2.78, 'Middle East', 79716203],\n      ['GBR', 80.05, 2, 'Europe', 61801570],\n      ['IRN', 72.49, 1.7, 'Middle East', 73137148],\n      ['IRQ', 68.09, 4.77, 'Middle East', 31090763],\n      ['ISR', 81.55, 2.96, 'Middle East', 7485600],\n      ['RUS', 68.6, 1.54, 'Europe', 141850000],\n      ['USA', 78.09, 2.05, 'North America', 307007000],\n    ]}\n    options={{\n      title:\n        'Correlation between life expectancy, fertility rate ' +\n        'and population of some world countries (2010)',\n      hAxis: { title: 'Life Expectancy' },\n      vAxis: { title: 'Fertility Rate' },\n      bubble: { textStyle: { fontSize: 11 } },\n    }}\n  />\n  <Chart\n    width={400}\n    height={300}\n    chartType=\"LineChart\"\n    loader={<div>Loading Chart</div>}\n    data={[\n      [\n        { type: 'number', label: 'x' },\n        { type: 'number', label: 'values' },\n        { id: 'i0', type: 'number', role: 'interval' },\n        { id: 'i1', type: 'number', role: 'interval' },\n        { id: 'i2', type: 'number', role: 'interval' },\n        { id: 'i2', type: 'number', role: 'interval' },\n        { id: 'i2', type: 'number', role: 'interval' },\n        { id: 'i2', type: 'number', role: 'interval' },\n      ],\n      [1, 100, 90, 110, 85, 96, 104, 120],\n      [2, 120, 95, 130, 90, 113, 124, 140],\n      [3, 130, 105, 140, 100, 117, 133, 139],\n      [4, 90, 85, 95, 85, 88, 92, 95],\n      [5, 70, 74, 63, 67, 69, 70, 72],\n      [6, 30, 39, 22, 21, 28, 34, 40],\n      [7, 80, 77, 83, 70, 77, 85, 90],\n      [8, 100, 90, 110, 85, 95, 102, 110],\n    ]}\n    options={{\n      intervals: { style: 'sticks' },\n      legend: 'none',\n    }}\n  />\n</div></div>)}\n}\nexport default Graph;"]},"metadata":{},"sourceType":"module"}