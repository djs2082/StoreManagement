{"ast":null,"code":"var _jsxFileName = \"/home/dilip/Desktop/MERN/himalaya/src/components/statistics2.component.js\";\nimport React, { Component } from 'react';\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\nvar Graph = React.createClass({\n  displayName: \"Graph\",\n  getInitialState: function () {\n    return {\n      data: [],\n      series: ['France', 'Italy', 'England', 'Sweden', 'Germany'],\n      labels: ['cats', 'dogs', 'horses', 'ducks', 'cows'],\n      colors: ['#43A19E', '#7B43A1', '#F2317A', '#FF9824', '#58CF6C']\n    };\n  },\n  componentDidMount: function () {\n    this.populateArray();\n  },\n  populateArray: function () {\n    var data = [],\n        series = 5,\n        //getRandomInt(2, 10),\n    serieLength = 5; //getRandomInt(2, 10);\n\n    for (var i = series; i--;) {\n      var tmp = [];\n\n      for (var j = serieLength; j--;) {\n        tmp.push(getRandomInt(0, 20));\n      }\n\n      data.push(tmp);\n    }\n\n    this.setState({\n      data: data\n    });\n  },\n  render: function () {\n    return /*#__PURE__*/React.createElement(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(Charts, {\n      data: this.state.data,\n      labels: this.state.series,\n      colors: this.state.colors,\n      height: 250,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Legend, {\n      labels: this.state.labels,\n      colors: this.state.colors,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }\n    }));\n  }\n});\nvar Legend = React.createClass({\n  displayName: \"Legend\",\n  render: function () {\n    var labels = this.props.labels,\n        colors = this.props.colors;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Legend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 5\n      }\n    }, labels.map(function (label, labelIndex) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"Legend--color\",\n        style: {\n          backgroundColor: colors[labelIndex % colors.length]\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 8\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"Legend--label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 8\n        }\n      }, label));\n    }));\n  }\n});\nvar Charts = React.createClass({\n  displayName: \"Charts\",\n  render: function () {\n    var self = this,\n        data = this.props.data,\n        layered = this.props.grouping === 'layered' ? true : false,\n        stacked = this.props.grouping === 'stacked' ? true : false,\n        opaque = this.props.opaque,\n        max = 0;\n\n    for (var i = data.length; i--;) {\n      for (var j = data[i].length; j--;) {\n        if (data[i][j] > max) {\n          max = data[i][j];\n        }\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: 'Charts' + (this.props.horizontal ? ' horizontal' : ''),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 6\n      }\n    }, data.map(function (serie, serieIndex) {\n      var sortedSerie = serie.slice(0),\n          sum;\n      sum = serie.reduce(function (carry, current) {\n        return carry + current;\n      }, 0);\n      sortedSerie.sort(compareNumbers);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: 'Charts--serie ' + self.props.grouping,\n        key: serieIndex,\n        style: {\n          height: self.props.height ? self.props.height : 'auto'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 9\n        }\n      }, self.props.labels[serieIndex]), serie.map(function (item, itemIndex) {\n        var color = self.props.colors[itemIndex],\n            style,\n            size = item / (stacked ? sum : max) * 100;\n        style = {\n          backgroundColor: color,\n          opacity: opaque ? 1 : item / max + .05,\n          zIndex: item\n        };\n\n        if (self.props.horizontal) {\n          style['width'] = size + '%';\n        } else {\n          style['height'] = size + '%';\n        }\n\n        if (layered && !self.props.horizontal) {\n          //console.log(sortedSerie, serie, sortedSerie.indexOf(item));\n          style['right'] = sortedSerie.indexOf(item) / (serie.length + 1) * 100 + '%'; // style['left'] = (itemIndex * 10) + '%';\n        }\n\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: 'Charts--item ' + self.props.grouping,\n          style: style,\n          key: itemIndex,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"b\", {\n          style: {\n            color: color\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 12\n          }\n        }, item));\n      }));\n    }));\n  }\n});\nexport default Graph; //   React.render(<Graph />, document.getElementById('charts'));","map":{"version":3,"sources":["/home/dilip/Desktop/MERN/himalaya/src/components/statistics2.component.js"],"names":["React","Component","getRandomInt","min","max","Math","floor","random","compareNumbers","a","b","Graph","createClass","getInitialState","data","series","labels","colors","componentDidMount","populateArray","serieLength","i","tmp","j","push","setState","render","state","Legend","props","map","label","labelIndex","backgroundColor","length","Charts","self","layered","grouping","stacked","opaque","horizontal","serie","serieIndex","sortedSerie","slice","sum","reduce","carry","current","sort","height","item","itemIndex","color","style","size","opacity","zIndex","indexOf"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nfunction getRandomInt(min, max) {\n\treturn Math.floor(Math.random() * (max - min)) + min;\n  }\n  \n  function compareNumbers(a, b) {\n\treturn a - b;\n  }\n  \n  var Graph = React.createClass({\n\t  getInitialState: function () {\n\t\t  return {\n\t\t\t  data: [],\n\t\t\t  series: ['France', 'Italy', 'England', 'Sweden', 'Germany'],\n\t\t\t  labels: ['cats', 'dogs', 'horses', 'ducks', 'cows'],\n\t\t\t  colors: ['#43A19E', '#7B43A1', '#F2317A', '#FF9824', '#58CF6C']\n\t\t  }\n\t  },\n\t  componentDidMount: function () {\n\t\t  this.populateArray();\n\t  },\n\t  populateArray: function () {\n\t\t  var data = [],\n\t\t\t  series = 5,//getRandomInt(2, 10),\n\t\t\t  serieLength = 5;//getRandomInt(2, 10);\n\t  \n\t\t  for (var i = series; i--; ) {\n\t\t\t  var tmp = [];\n\t\t\t  \n\t\t\t  for (var j = serieLength; j--; ) {\n\t\t\t\t  tmp.push(getRandomInt(0, 20));\n\t\t\t  }\n\t\t\t  \n\t\t\t  data.push(tmp);\t\t\t\n\t\t  }\n\t\t  \n\t\t  this.setState({ data: data });\n\t  },\n\t  render: function () {\n\t\t  return (\n\t\t\t  <section>\n\t\t\t\t  <Charts\n\t\t\t\t\t  data={ this.state.data }\n\t\t\t\t\t  labels={ this.state.series }\n\t\t\t\t\t  colors={ this.state.colors }\n\t\t\t\t\t  height={ 250 }\n\t\t\t\t  />\n\t\t\t\t  <Legend labels={ this.state.labels } colors={ this.state.colors } />\n\t\t\t  </section>\n\t\t  );\n\t  }\n  });\n  \n  \n  \n  var Legend = React.createClass({\n\t  render: function () {\n\t\t  var labels = this.props.labels,\n\t\t\t  colors = this.props.colors;\n\t\t  \n\t\t  return (\n\t\t  <div className=\"Legend\">\n\t\t\t  { labels.map(function(label, labelIndex) {\n\t\t\t\t  return (\n\t\t\t\t  <div>\n\t\t\t\t\t  <span className=\"Legend--color\" style={{ backgroundColor: colors[labelIndex % colors.length]  }} />\n\t\t\t\t\t  <span className=\"Legend--label\">{ label }</span>\n\t\t\t\t  </div>\n\t\t\t\t  );\n\t\t\t  }) }\n\t\t  </div>\n\t\t  );\n\t  }\n  });\n  \n  var Charts = React.createClass({\n\t  render: function () {\n\t\t  var self = this,\n\t\t\t  data = this.props.data,\n\t\t\t  layered = this.props.grouping === 'layered' ? true : false,\n\t\t\t  stacked = this.props.grouping === 'stacked' ? true : false,\n\t\t\t  opaque = this.props.opaque,\n\t\t\t  max = 0;\n\t\t  \n\t\t  for (var i = data.length; i--; ) {\n\t\t\t  for (var j = data[i].length; j--; ) {\n\t\t\t\t  if (data[i][j] > max) {\n\t\t\t\t\t  max = data[i][j];\n\t\t\t\t  }\n\t\t\t  }\n\t\t  }\n\t\t  \n\t\t\t\t  \n\t\t  return (\n\t\t\t  <div className={ 'Charts' + (this.props.horizontal ? ' horizontal' : '' ) }>\n\t\t\t\t  { data.map(function (serie, serieIndex) {\n\t\t\t\t\t   var sortedSerie = serie.slice(0),\n\t\t\t\t\t\t   sum;\n\t\t\t\t\t   \n\t\t\t\t\t   sum = serie.reduce(function (carry, current) {\n\t\t\t\t\t\t   return carry + current;\n\t\t\t\t\t  }, 0);\n\t\t\t\t\t   sortedSerie.sort(compareNumbers);\t\t\t\t \t\t\n\t\t\t\t\t\t\t\t\t   \n\t\t\t\t\t  return (\n\t\t\t\t\t\t  <div className={ 'Charts--serie ' + (self.props.grouping) }\n\t\t\t\t\t\t\t   key={ serieIndex }\n\t\t\t\t\t\t\t  style={{ height: self.props.height ? self.props.height: 'auto' }}\n\t\t\t\t\t\t  >\n\t\t\t\t\t\t  <label>{ self.props.labels[serieIndex] }</label>\n\t\t\t\t\t\t  { serie.map(function (item, itemIndex) {\n\t\t\t\t\t\t\t  var color = self.props.colors[itemIndex], style,\n\t\t\t\t\t\t\t\t  size = item / (stacked ? sum : max) * 100;\n\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t  style = {\n\t\t\t\t\t\t\t\t  backgroundColor: color,\n\t\t\t\t\t\t\t\t  opacity: opaque ? 1 : (item/max + .05),\n\t\t\t\t\t\t\t\t  zIndex: item\n\t\t\t\t\t\t\t  };\n\t\t\t\t\t\t  \n\t\t\t\t\t\t\t  if (self.props.horizontal) {\n\t\t\t\t\t\t\t\t  style['width'] = size + '%';\n\t\t\t\t\t\t\t  } else {\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t  style['height'] = size + '%';\t\t\t\t\t\t\n\t\t\t\t\t\t\t  }\n\t  \n\t\t\t\t\t\t\t  if (layered && !self.props.horizontal) {\n\t\t\t\t\t\t\t\t  //console.log(sortedSerie, serie, sortedSerie.indexOf(item));\n\t\t\t\t\t\t\t\t  style['right'] = ((sortedSerie.indexOf(item) / (serie.length + 1)) * 100) + '%';\n\t\t\t\t\t\t\t\t  // style['left'] = (itemIndex * 10) + '%';\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t  \n\t\t\t\t\t\t   return (\n\t\t\t\t\t\t\t   <div\n\t\t\t\t\t\t\t\t   className={ 'Charts--item ' + (self.props.grouping) }\n\t\t\t\t\t\t\t\t   style={ style }\n\t\t\t\t\t\t\t\t  key={ itemIndex }\n\t\t\t\t\t\t\t  >\n\t\t\t\t\t\t\t\t   <b style={{ color: color }}>{ item }</b>\n\t\t\t\t\t\t\t   </div>\n\t\t\t\t\t\t  );\n\t\t\t\t\t\t  }) }\n\t\t\t\t\t\t  </div>\n\t\t\t\t\t  );\n\t\t\t\t  }) }\n\t\t\t  </div>\n\t\t  );\n\t  }\n  });\n  export default Graph\n//   React.render(<Graph />, document.getElementById('charts'));"]},"metadata":{},"sourceType":"module"}