{"ast":null,"code":"var _jsxFileName = \"/home/dilip/Desktop/MERN/himalayafinal/src/components/statistics3.component.js\";\nimport React, { Component } from 'react';\nimport Chart from \"react-google-charts\"; // or\n// import { Chart } from \"react-google-charts\";\n// // or\n// const { Chart } = require(\"react-google-charts\");\n// // or\n// var Chart = require(\"react-google-charts\").Chart;\n\nclass Graph extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        maxWidth: 900\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(Chart, {\n      width: 1400,\n      height: 1300,\n      chartType: \"ColumnChart\",\n      loader: /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 13\n        }\n      }, \"Loading Chart\"),\n      data: [// ['NY',  26],\n      // ['New York City, NY', 8175000],\n      ['City', '2010 Population'], ['01-01-2020', 28], ['02-01-2020', 38], ['03-01-2020', 48], ['04-01-2020', 28], ['05-01-2020', 118], ['06-01-2020', 78], ['07-01-2020', 98], ['08-01-2020', 8], ['09-01-2020', 248], ['10-01-2020', 268], ['11-01-2020', 29], ['12-01-2020', 18], ['13-01-2020', 78], ['14-01-2020', 28], ['15-01-2020', 28], ['16-01-2020', 28], ['17-01-2020', 28], ['18-01-2020', 28], ['19-01-2020', 28], ['20-01-2020', 28], ['21-01-2020', 28], ['22-01-2020', 28], ['23-01-2020', 28], ['24-01-2020', 28], ['25-01-2020', 28], ['26-01-2020', 28], ['27-01-2020', 28], ['28-01-2020', 28], ['29-01-2020', 28], ['30-01-2020', 28], ['31-01-2020', 28] // [new Date(new Date(Date.parse(\"2020-08-03\")).getFullYear(), new Date(Date.parse(\"2020-08-03\")).getMonth(), new Date(Date.parse(\"2020-08-03\")).getDate()),  32],\n      // [new Date(new Date(Date.parse(\"2020-08-04\")).getFullYear(), new Date(Date.parse(\"2020-08-04\")).getMonth(), new Date(Date.parse(\"2020-08-04\")).getDate()),  36],\n      // [new Date(new Date(Date.parse(\"2020-08-05\")).getFullYear(), new Date(Date.parse(\"2020-08-05\")).getMonth(), new Date(Date.parse(\"2020-08-05\")).getDate()),  40],\n      // [ new Date(new Date(Date.parse(\"2020-08-06\")).getFullYear(), new Date(Date.parse(\"2020-08-06\")).getMonth(), new Date(Date.parse(\"2020-08-06\")).getDate()),  26],\n      // [ new Date(new Date(Date.parse(\"2020-08-07\")).getFullYear(), new Date(Date.parse(\"2020-08-07\")).getMonth(), new Date(Date.parse(\"2020-08-07\")).getDate()),  32],\n      // [ new Date(new Date(Date.parse(\"2020-08-08\")).getFullYear(), new Date(Date.parse(\"2020-08-08\")).getMonth(), new Date(Date.parse(\"2020-08-08\")).getDate()),  36],\n      // [ new Date(new Date(Date.parse(\"2020-08-09\")).getFullYear(), new Date(Date.parse(\"2020-08-09\")).getMonth(), new Date(Date.parse(\"2020-08-09\")).getDate()),  40],\n      // [ new Date(new Date(Date.parse(\"2020-08-10\")).getFullYear(), new Date(Date.parse(\"2020-08-10\")).getMonth(), new Date(Date.parse(\"2020-08-10\")).getDate()),  26],\n      // [ new Date(new Date(Date.parse(\"2020-08-11\")).getFullYear(), new Date(Date.parse(\"2020-08-11\")).getMonth(), new Date(Date.parse(\"2020-08-11\")).getDate()),  26],\n      // [ new Date(new Date(Date.parse(\"2020-08-12\")).getFullYear(), new Date(Date.parse(\"2020-08-12\")).getMonth(), new Date(Date.parse(\"2020-08-12\")).getDate()),  28],\n      // [ new Date(new Date(Date.parse(\"2020-08-13\")).getFullYear(), new Date(Date.parse(\"2020-08-13\")).getMonth(), new Date(Date.parse(\"2020-08-13\")).getDate()),  32],\n      // [ new Date(new Date(Date.parse(\"2020-08-14\")).getFullYear(), new Date(Date.parse(\"2020-08-14\")).getMonth(), new Date(Date.parse(\"2020-08-14\")).getDate()),  36],\n      // [ new Date(new Date(Date.parse(\"2020-08-15\")).getFullYear(), new Date(Date.parse(\"2020-08-15\")).getMonth(), new Date(Date.parse(\"2020-08-15\")).getDate()),  40],\n      // [ new Date(new Date(Date.parse(\"2020-08-16\")).getFullYear(), new Date(Date.parse(\"2020-08-16\")).getMonth(), new Date(Date.parse(\"2020-08-16\")).getDate()),  26],\n      // [ new Date(new Date(Date.parse(\"2020-08-17\")).getFullYear(), new Date(Date.parse(\"2020-08-17\")).getMonth(), new Date(Date.parse(\"2020-08-17\")).getDate()),  32],\n      // [ new Date(new Date(Date.parse(\"2020-08-18\")).getFullYear(), new Date(Date.parse(\"2020-08-18\")).getMonth(), new Date(Date.parse(\"2020-08-18\")).getDate()),  36],\n      // [ new Date(new Date(Date.parse(\"2020-08-19\")).getFullYear(), new Date(Date.parse(\"2020-08-19\")).getMonth(), new Date(Date.parse(\"2020-08-19\")).getDate()),  40],\n      // [ new Date(new Date(Date.parse(\"2020-08-20\")).getFullYear(), new Date(Date.parse(\"2020-08-20\")).getMonth(), new Date(Date.parse(\"2020-08-20\")).getDate()),  26],\n      // [ new Date(new Date(Date.parse(\"2020-08-21\")).getFullYear(), new Date(Date.parse(\"2020-08-21\")).getMonth(), new Date(Date.parse(\"2020-08-21\")).getDate()),  26],\n      // [ new Date(new Date(Date.parse(\"2020-08-22\")).getFullYear(), new Date(Date.parse(\"2020-08-22\")).getMonth(), new Date(Date.parse(\"2020-08-22\")).getDate()),  28],\n      // [ new Date(new Date(Date.parse(\"2020-08-23\")).getFullYear(), new Date(Date.parse(\"2020-08-23\")).getMonth(), new Date(Date.parse(\"2020-08-23\")).getDate()),  32],\n      // [ new Date(new Date(Date.parse(\"2020-08-24\")).getFullYear(), new Date(Date.parse(\"2020-08-24\")).getMonth(), new Date(Date.parse(\"2020-08-24\")).getDate()),  36],\n      // [ new Date(new Date(Date.parse(\"2020-08-25\")).getFullYear(), new Date(Date.parse(\"2020-08-25\")).getMonth(), new Date(Date.parse(\"2020-08-25\")).getDate()),  40],\n      // [ new Date(new Date(Date.parse(\"2020-08-26\")).getFullYear(), new Date(Date.parse(\"2020-08-26\")).getMonth(), new Date(Date.parse(\"2020-08-26\")).getDate()),  26],\n      // [ new Date(new Date(Date.parse(\"2020-08-27\")).getFullYear(), new Date(Date.parse(\"2020-08-27\")).getMonth(), new Date(Date.parse(\"2020-08-27\")).getDate()),  32],\n      // [ new Date(new Date(Date.parse(\"2020-08-28\")).getFullYear(), new Date(Date.parse(\"2020-08-28\")).getMonth(), new Date(Date.parse(\"2020-08-28\")).getDate()),  36],\n      // [ new Date(new Date(Date.parse(\"2020-08-29\")).getFullYear(), new Date(Date.parse(\"2020-08-29\")).getMonth(), new Date(Date.parse(\"2020-08-29\")).getDate()),  40],\n      // [ new Date(new Date(Date.parse(\"2020-08-30\")).getFullYear(), new Date(Date.parse(\"2020-08-30\")).getMonth(), new Date(Date.parse(\"2020-08-30\")).getDate()),  26],\n      //   ['City', '2010 Population'],\n      //   [new Date(new Date(Date.parse(\"2020-08-30\")).getFullYear(), new Date(Date.parse(\"2020-08-30\")).getMonth(), new Date(Date.parse(\"2020-08-30\")).getDate()), 8175000],\n      //   ['Los Angeles, CA', 3792000],\n      //   ['Chicago, IL', 2695000],\n      //   ['Houston, TX', 2099000],\n      //   ['Philadelphia, PA', 1526000],\n      ],\n      options: {\n        title: 'Population of Largest U.S. Cities',\n        chartArea: {\n          width: '30%'\n        },\n        hAxis: {\n          title: 'Total Population',\n          minValue: 0\n        },\n        vAxis: {\n          title: 'City'\n        }\n      },\n      legendToggle: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 3\n      }\n    })));\n  }\n\n}\n\nexport default Graph;","map":{"version":3,"sources":["/home/dilip/Desktop/MERN/himalayafinal/src/components/statistics3.component.js"],"names":["React","Component","Chart","Graph","constructor","props","render","display","maxWidth","title","chartArea","width","hAxis","minValue","vAxis"],"mappings":"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","sourcesContent":["import React,{Component} from 'react'\nimport Chart from \"react-google-charts\";\n// or\n// import { Chart } from \"react-google-charts\";\n// // or\n// const { Chart } = require(\"react-google-charts\");\n// // or\n// var Chart = require(\"react-google-charts\").Chart;\nclass Graph extends Component\n{\n    constructor(props)\n    {\n        super(props)\n    }\n    render()\n    {\n        return(\n            <div>\n<div style={{ display: 'flex', maxWidth: 900 }}>\n  <Chart\n    width={1400}\n    height={1300}\n    chartType=\"ColumnChart\"\n    loader={<div>Loading Chart</div>}\n    data={[\n                // ['NY',  26],\n                // ['New York City, NY', 8175000],\n                ['City', '2010 Population'],\n                ['01-01-2020',  28],\n\t\t\t\t['02-01-2020',  38],\n\t\t\t\t['03-01-2020',  48],\n\t\t\t\t['04-01-2020',  28],\n\t\t\t\t['05-01-2020',  118],\n\t\t\t\t['06-01-2020',  78],\n\t\t\t\t['07-01-2020',  98],\n\t\t\t\t['08-01-2020',  8],\n\t\t\t\t['09-01-2020',  248],\n\t\t\t\t['10-01-2020',  268],\n\t\t\t\t['11-01-2020',  29],\n\t\t\t\t['12-01-2020',  18],\n\t\t\t\t['13-01-2020',  78],\n\t\t\t\t['14-01-2020',  28],\n\t\t\t\t['15-01-2020',  28],\n\t\t\t\t['16-01-2020',  28],\n\t\t\t\t['17-01-2020',  28],\n\t\t\t\t['18-01-2020',  28],\n\t\t\t\t['19-01-2020',  28],\n\t\t\t\t['20-01-2020',  28],\n\t\t\t\t['21-01-2020',  28],\n\t\t\t\t['22-01-2020',  28],\n\t\t\t\t['23-01-2020',  28],\n\t\t\t\t['24-01-2020',  28],\n\t\t\t\t['25-01-2020',  28],\n\t\t\t\t['26-01-2020',  28],\n\t\t\t\t['27-01-2020',  28],\n\t\t\t\t['28-01-2020',  28],\n\t\t\t\t['29-01-2020',  28],\n\t\t\t\t['30-01-2020',  28],\n\t\t\t\t['31-01-2020',  28],\n                \n\t\t\t\t// [new Date(new Date(Date.parse(\"2020-08-03\")).getFullYear(), new Date(Date.parse(\"2020-08-03\")).getMonth(), new Date(Date.parse(\"2020-08-03\")).getDate()),  32],\n\t\t\t\t// [new Date(new Date(Date.parse(\"2020-08-04\")).getFullYear(), new Date(Date.parse(\"2020-08-04\")).getMonth(), new Date(Date.parse(\"2020-08-04\")).getDate()),  36],\n\t\t\t\t// [new Date(new Date(Date.parse(\"2020-08-05\")).getFullYear(), new Date(Date.parse(\"2020-08-05\")).getMonth(), new Date(Date.parse(\"2020-08-05\")).getDate()),  40],\n\t\t\t\t// [ new Date(new Date(Date.parse(\"2020-08-06\")).getFullYear(), new Date(Date.parse(\"2020-08-06\")).getMonth(), new Date(Date.parse(\"2020-08-06\")).getDate()),  26],\n\t\t\t\t// [ new Date(new Date(Date.parse(\"2020-08-07\")).getFullYear(), new Date(Date.parse(\"2020-08-07\")).getMonth(), new Date(Date.parse(\"2020-08-07\")).getDate()),  32],\n\t\t\t\t// [ new Date(new Date(Date.parse(\"2020-08-08\")).getFullYear(), new Date(Date.parse(\"2020-08-08\")).getMonth(), new Date(Date.parse(\"2020-08-08\")).getDate()),  36],\n\t\t\t\t// [ new Date(new Date(Date.parse(\"2020-08-09\")).getFullYear(), new Date(Date.parse(\"2020-08-09\")).getMonth(), new Date(Date.parse(\"2020-08-09\")).getDate()),  40],\n\t\t\t\t// [ new Date(new Date(Date.parse(\"2020-08-10\")).getFullYear(), new Date(Date.parse(\"2020-08-10\")).getMonth(), new Date(Date.parse(\"2020-08-10\")).getDate()),  26],\n\t\t\t\t// [ new Date(new Date(Date.parse(\"2020-08-11\")).getFullYear(), new Date(Date.parse(\"2020-08-11\")).getMonth(), new Date(Date.parse(\"2020-08-11\")).getDate()),  26],\n\t\t\t\t// [ new Date(new Date(Date.parse(\"2020-08-12\")).getFullYear(), new Date(Date.parse(\"2020-08-12\")).getMonth(), new Date(Date.parse(\"2020-08-12\")).getDate()),  28],\n\t\t\t\t// [ new Date(new Date(Date.parse(\"2020-08-13\")).getFullYear(), new Date(Date.parse(\"2020-08-13\")).getMonth(), new Date(Date.parse(\"2020-08-13\")).getDate()),  32],\n\t\t\t\t// [ new Date(new Date(Date.parse(\"2020-08-14\")).getFullYear(), new Date(Date.parse(\"2020-08-14\")).getMonth(), new Date(Date.parse(\"2020-08-14\")).getDate()),  36],\n\t\t\t\t// [ new Date(new Date(Date.parse(\"2020-08-15\")).getFullYear(), new Date(Date.parse(\"2020-08-15\")).getMonth(), new Date(Date.parse(\"2020-08-15\")).getDate()),  40],\n\t\t\t\t// [ new Date(new Date(Date.parse(\"2020-08-16\")).getFullYear(), new Date(Date.parse(\"2020-08-16\")).getMonth(), new Date(Date.parse(\"2020-08-16\")).getDate()),  26],\n\t\t\t\t// [ new Date(new Date(Date.parse(\"2020-08-17\")).getFullYear(), new Date(Date.parse(\"2020-08-17\")).getMonth(), new Date(Date.parse(\"2020-08-17\")).getDate()),  32],\n\t\t\t\t// [ new Date(new Date(Date.parse(\"2020-08-18\")).getFullYear(), new Date(Date.parse(\"2020-08-18\")).getMonth(), new Date(Date.parse(\"2020-08-18\")).getDate()),  36],\n\t\t\t\t// [ new Date(new Date(Date.parse(\"2020-08-19\")).getFullYear(), new Date(Date.parse(\"2020-08-19\")).getMonth(), new Date(Date.parse(\"2020-08-19\")).getDate()),  40],\n\t\t\t\t// [ new Date(new Date(Date.parse(\"2020-08-20\")).getFullYear(), new Date(Date.parse(\"2020-08-20\")).getMonth(), new Date(Date.parse(\"2020-08-20\")).getDate()),  26],\n\t\t\t\t// [ new Date(new Date(Date.parse(\"2020-08-21\")).getFullYear(), new Date(Date.parse(\"2020-08-21\")).getMonth(), new Date(Date.parse(\"2020-08-21\")).getDate()),  26],\n\t\t\t\t// [ new Date(new Date(Date.parse(\"2020-08-22\")).getFullYear(), new Date(Date.parse(\"2020-08-22\")).getMonth(), new Date(Date.parse(\"2020-08-22\")).getDate()),  28],\n\t\t\t\t// [ new Date(new Date(Date.parse(\"2020-08-23\")).getFullYear(), new Date(Date.parse(\"2020-08-23\")).getMonth(), new Date(Date.parse(\"2020-08-23\")).getDate()),  32],\n\t\t\t\t// [ new Date(new Date(Date.parse(\"2020-08-24\")).getFullYear(), new Date(Date.parse(\"2020-08-24\")).getMonth(), new Date(Date.parse(\"2020-08-24\")).getDate()),  36],\n\t\t\t\t// [ new Date(new Date(Date.parse(\"2020-08-25\")).getFullYear(), new Date(Date.parse(\"2020-08-25\")).getMonth(), new Date(Date.parse(\"2020-08-25\")).getDate()),  40],\n\t\t\t\t// [ new Date(new Date(Date.parse(\"2020-08-26\")).getFullYear(), new Date(Date.parse(\"2020-08-26\")).getMonth(), new Date(Date.parse(\"2020-08-26\")).getDate()),  26],\n\t\t\t\t// [ new Date(new Date(Date.parse(\"2020-08-27\")).getFullYear(), new Date(Date.parse(\"2020-08-27\")).getMonth(), new Date(Date.parse(\"2020-08-27\")).getDate()),  32],\n\t\t\t\t// [ new Date(new Date(Date.parse(\"2020-08-28\")).getFullYear(), new Date(Date.parse(\"2020-08-28\")).getMonth(), new Date(Date.parse(\"2020-08-28\")).getDate()),  36],\n\t\t\t\t// [ new Date(new Date(Date.parse(\"2020-08-29\")).getFullYear(), new Date(Date.parse(\"2020-08-29\")).getMonth(), new Date(Date.parse(\"2020-08-29\")).getDate()),  40],\n\t\t\t\t// [ new Date(new Date(Date.parse(\"2020-08-30\")).getFullYear(), new Date(Date.parse(\"2020-08-30\")).getMonth(), new Date(Date.parse(\"2020-08-30\")).getDate()),  26],\n    //   ['City', '2010 Population'],\n    //   [new Date(new Date(Date.parse(\"2020-08-30\")).getFullYear(), new Date(Date.parse(\"2020-08-30\")).getMonth(), new Date(Date.parse(\"2020-08-30\")).getDate()), 8175000],\n    //   ['Los Angeles, CA', 3792000],\n    //   ['Chicago, IL', 2695000],\n    //   ['Houston, TX', 2099000],\n    //   ['Philadelphia, PA', 1526000],\n    ]}\n    options={{\n      title: 'Population of Largest U.S. Cities',\n      chartArea: { width: '30%' },\n      hAxis: {\n        title: 'Total Population',\n        minValue: 0,\n      },\n      vAxis: {\n        title: 'City',\n      },\n    }}\n    legendToggle\n  />\n \n</div></div>)}\n}\nexport default Graph;"]},"metadata":{},"sourceType":"module"}