{"ast":null,"code":"var _jsxFileName = \"/home/dilip/Desktop/MERN/himalayafinal/src/components/statistics3.component.js\";\nimport React, { Component } from 'react';\nimport Chart from \"react-google-charts\"; // or\n// import { Chart } from \"react-google-charts\";\n// // or\n// const { Chart } = require(\"react-google-charts\");\n// // or\n// var Chart = require(\"react-google-charts\").Chart;\n\nclass Graph extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        maxWidth: 900\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(Chart, {\n      width: 1400,\n      height: 1300,\n      chartType: \"ColumnChart\",\n      loader: /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 13\n        }\n      }, \"Loading Chart\"),\n      data: [[new Date(new Date(Date.parse(\"2020-08-01\")).getFullYear(), new Date(Date.parse(\"2020-08-01\")).getMonth(), new Date(Date.parse(\"2020-08-01\")).getDate()), 26], [new Date(new Date(Date.parse(\"2020-08-02\")).getFullYear(), new Date(Date.parse(\"2020-08-02\")).getMonth(), new Date(Date.parse(\"2020-08-02\")).getDate()), 28], [new Date(new Date(Date.parse(\"2020-08-03\")).getFullYear(), new Date(Date.parse(\"2020-08-03\")).getMonth(), new Date(Date.parse(\"2020-08-03\")).getDate()), 32], [new Date(new Date(Date.parse(\"2020-08-04\")).getFullYear(), new Date(Date.parse(\"2020-08-04\")).getMonth(), new Date(Date.parse(\"2020-08-04\")).getDate()), 36], [new Date(new Date(Date.parse(\"2020-08-05\")).getFullYear(), new Date(Date.parse(\"2020-08-05\")).getMonth(), new Date(Date.parse(\"2020-08-05\")).getDate()), 40], [new Date(new Date(Date.parse(\"2020-08-06\")).getFullYear(), new Date(Date.parse(\"2020-08-06\")).getMonth(), new Date(Date.parse(\"2020-08-06\")).getDate()), 26], [new Date(new Date(Date.parse(\"2020-08-07\")).getFullYear(), new Date(Date.parse(\"2020-08-07\")).getMonth(), new Date(Date.parse(\"2020-08-07\")).getDate()), 32], [new Date(new Date(Date.parse(\"2020-08-08\")).getFullYear(), new Date(Date.parse(\"2020-08-08\")).getMonth(), new Date(Date.parse(\"2020-08-08\")).getDate()), 36], [new Date(new Date(Date.parse(\"2020-08-09\")).getFullYear(), new Date(Date.parse(\"2020-08-09\")).getMonth(), new Date(Date.parse(\"2020-08-09\")).getDate()), 40], [new Date(new Date(Date.parse(\"2020-08-10\")).getFullYear(), new Date(Date.parse(\"2020-08-10\")).getMonth(), new Date(Date.parse(\"2020-08-10\")).getDate()), 26], [new Date(new Date(Date.parse(\"2020-08-11\")).getFullYear(), new Date(Date.parse(\"2020-08-11\")).getMonth(), new Date(Date.parse(\"2020-08-11\")).getDate()), 26], [new Date(new Date(Date.parse(\"2020-08-12\")).getFullYear(), new Date(Date.parse(\"2020-08-12\")).getMonth(), new Date(Date.parse(\"2020-08-12\")).getDate()), 28], [new Date(new Date(Date.parse(\"2020-08-13\")).getFullYear(), new Date(Date.parse(\"2020-08-13\")).getMonth(), new Date(Date.parse(\"2020-08-13\")).getDate()), 32], [new Date(new Date(Date.parse(\"2020-08-14\")).getFullYear(), new Date(Date.parse(\"2020-08-14\")).getMonth(), new Date(Date.parse(\"2020-08-14\")).getDate()), 36], [new Date(new Date(Date.parse(\"2020-08-15\")).getFullYear(), new Date(Date.parse(\"2020-08-15\")).getMonth(), new Date(Date.parse(\"2020-08-15\")).getDate()), 40], [new Date(new Date(Date.parse(\"2020-08-16\")).getFullYear(), new Date(Date.parse(\"2020-08-16\")).getMonth(), new Date(Date.parse(\"2020-08-16\")).getDate()), 26], [new Date(new Date(Date.parse(\"2020-08-17\")).getFullYear(), new Date(Date.parse(\"2020-08-17\")).getMonth(), new Date(Date.parse(\"2020-08-17\")).getDate()), 32], [new Date(new Date(Date.parse(\"2020-08-18\")).getFullYear(), new Date(Date.parse(\"2020-08-18\")).getMonth(), new Date(Date.parse(\"2020-08-18\")).getDate()), 36], [new Date(new Date(Date.parse(\"2020-08-19\")).getFullYear(), new Date(Date.parse(\"2020-08-19\")).getMonth(), new Date(Date.parse(\"2020-08-19\")).getDate()), 40], [new Date(new Date(Date.parse(\"2020-08-20\")).getFullYear(), new Date(Date.parse(\"2020-08-20\")).getMonth(), new Date(Date.parse(\"2020-08-20\")).getDate()), 26], [new Date(new Date(Date.parse(\"2020-08-21\")).getFullYear(), new Date(Date.parse(\"2020-08-21\")).getMonth(), new Date(Date.parse(\"2020-08-21\")).getDate()), 26], [new Date(new Date(Date.parse(\"2020-08-22\")).getFullYear(), new Date(Date.parse(\"2020-08-22\")).getMonth(), new Date(Date.parse(\"2020-08-22\")).getDate()), 28], [new Date(new Date(Date.parse(\"2020-08-23\")).getFullYear(), new Date(Date.parse(\"2020-08-23\")).getMonth(), new Date(Date.parse(\"2020-08-23\")).getDate()), 32], [new Date(new Date(Date.parse(\"2020-08-24\")).getFullYear(), new Date(Date.parse(\"2020-08-24\")).getMonth(), new Date(Date.parse(\"2020-08-24\")).getDate()), 36], [new Date(new Date(Date.parse(\"2020-08-25\")).getFullYear(), new Date(Date.parse(\"2020-08-25\")).getMonth(), new Date(Date.parse(\"2020-08-25\")).getDate()), 40], [new Date(new Date(Date.parse(\"2020-08-26\")).getFullYear(), new Date(Date.parse(\"2020-08-26\")).getMonth(), new Date(Date.parse(\"2020-08-26\")).getDate()), 26], [new Date(new Date(Date.parse(\"2020-08-27\")).getFullYear(), new Date(Date.parse(\"2020-08-27\")).getMonth(), new Date(Date.parse(\"2020-08-27\")).getDate()), 32], [new Date(new Date(Date.parse(\"2020-08-28\")).getFullYear(), new Date(Date.parse(\"2020-08-28\")).getMonth(), new Date(Date.parse(\"2020-08-28\")).getDate()), 36], [new Date(new Date(Date.parse(\"2020-08-29\")).getFullYear(), new Date(Date.parse(\"2020-08-29\")).getMonth(), new Date(Date.parse(\"2020-08-29\")).getDate()), 40], [new Date(new Date(Date.parse(\"2020-08-30\")).getFullYear(), new Date(Date.parse(\"2020-08-30\")).getMonth(), new Date(Date.parse(\"2020-08-30\")).getDate()), 26] //   ['City', '2010 Population'],\n      //   ['New York City, NY', 8175000],\n      //   ['Los Angeles, CA', 3792000],\n      //   ['Chicago, IL', 2695000],\n      //   ['Houston, TX', 2099000],\n      //   ['Philadelphia, PA', 1526000],\n      ],\n      options: {\n        title: 'Population of Largest U.S. Cities',\n        chartArea: {\n          width: '30%'\n        },\n        hAxis: {\n          title: 'Total Population',\n          minValue: 0\n        },\n        vAxis: {\n          title: 'City'\n        }\n      },\n      legendToggle: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 3\n      }\n    })));\n  }\n\n}\n\nexport default Graph;","map":{"version":3,"sources":["/home/dilip/Desktop/MERN/himalayafinal/src/components/statistics3.component.js"],"names":["React","Component","Chart","Graph","constructor","props","render","display","maxWidth","Date","parse","getFullYear","getMonth","getDate","title","chartArea","width","hAxis","minValue","vAxis"],"mappings":"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","sourcesContent":["import React,{Component} from 'react'\nimport Chart from \"react-google-charts\";\n// or\n// import { Chart } from \"react-google-charts\";\n// // or\n// const { Chart } = require(\"react-google-charts\");\n// // or\n// var Chart = require(\"react-google-charts\").Chart;\nclass Graph extends Component\n{\n    constructor(props)\n    {\n        super(props)\n    }\n    render()\n    {\n        return(\n            <div>\n<div style={{ display: 'flex', maxWidth: 900 }}>\n  <Chart\n    width={1400}\n    height={1300}\n    chartType=\"ColumnChart\"\n    loader={<div>Loading Chart</div>}\n    data={[\n        \t\t\t\t[ new Date(new Date(Date.parse(\"2020-08-01\")).getFullYear(), new Date(Date.parse(\"2020-08-01\")).getMonth(), new Date(Date.parse(\"2020-08-01\")).getDate()),  26],\n\t\t\t\t[new Date(new Date(Date.parse(\"2020-08-02\")).getFullYear(), new Date(Date.parse(\"2020-08-02\")).getMonth(), new Date(Date.parse(\"2020-08-02\")).getDate()),  28],\n\t\t\t\t[new Date(new Date(Date.parse(\"2020-08-03\")).getFullYear(), new Date(Date.parse(\"2020-08-03\")).getMonth(), new Date(Date.parse(\"2020-08-03\")).getDate()),  32],\n\t\t\t\t[new Date(new Date(Date.parse(\"2020-08-04\")).getFullYear(), new Date(Date.parse(\"2020-08-04\")).getMonth(), new Date(Date.parse(\"2020-08-04\")).getDate()),  36],\n\t\t\t\t[ new Date(new Date(Date.parse(\"2020-08-05\")).getFullYear(), new Date(Date.parse(\"2020-08-05\")).getMonth(), new Date(Date.parse(\"2020-08-05\")).getDate()),  40],\n\t\t\t\t[ new Date(new Date(Date.parse(\"2020-08-06\")).getFullYear(), new Date(Date.parse(\"2020-08-06\")).getMonth(), new Date(Date.parse(\"2020-08-06\")).getDate()),  26],\n\t\t\t\t[ new Date(new Date(Date.parse(\"2020-08-07\")).getFullYear(), new Date(Date.parse(\"2020-08-07\")).getMonth(), new Date(Date.parse(\"2020-08-07\")).getDate()),  32],\n\t\t\t\t[ new Date(new Date(Date.parse(\"2020-08-08\")).getFullYear(), new Date(Date.parse(\"2020-08-08\")).getMonth(), new Date(Date.parse(\"2020-08-08\")).getDate()),  36],\n\t\t\t\t[ new Date(new Date(Date.parse(\"2020-08-09\")).getFullYear(), new Date(Date.parse(\"2020-08-09\")).getMonth(), new Date(Date.parse(\"2020-08-09\")).getDate()),  40],\n\t\t\t\t[ new Date(new Date(Date.parse(\"2020-08-10\")).getFullYear(), new Date(Date.parse(\"2020-08-10\")).getMonth(), new Date(Date.parse(\"2020-08-10\")).getDate()),  26],\n\t\t\t\t[ new Date(new Date(Date.parse(\"2020-08-11\")).getFullYear(), new Date(Date.parse(\"2020-08-11\")).getMonth(), new Date(Date.parse(\"2020-08-11\")).getDate()),  26],\n\t\t\t\t[ new Date(new Date(Date.parse(\"2020-08-12\")).getFullYear(), new Date(Date.parse(\"2020-08-12\")).getMonth(), new Date(Date.parse(\"2020-08-12\")).getDate()),  28],\n\t\t\t\t[ new Date(new Date(Date.parse(\"2020-08-13\")).getFullYear(), new Date(Date.parse(\"2020-08-13\")).getMonth(), new Date(Date.parse(\"2020-08-13\")).getDate()),  32],\n\t\t\t\t[ new Date(new Date(Date.parse(\"2020-08-14\")).getFullYear(), new Date(Date.parse(\"2020-08-14\")).getMonth(), new Date(Date.parse(\"2020-08-14\")).getDate()),  36],\n\t\t\t\t[ new Date(new Date(Date.parse(\"2020-08-15\")).getFullYear(), new Date(Date.parse(\"2020-08-15\")).getMonth(), new Date(Date.parse(\"2020-08-15\")).getDate()),  40],\n\t\t\t\t[ new Date(new Date(Date.parse(\"2020-08-16\")).getFullYear(), new Date(Date.parse(\"2020-08-16\")).getMonth(), new Date(Date.parse(\"2020-08-16\")).getDate()),  26],\n\t\t\t\t[ new Date(new Date(Date.parse(\"2020-08-17\")).getFullYear(), new Date(Date.parse(\"2020-08-17\")).getMonth(), new Date(Date.parse(\"2020-08-17\")).getDate()),  32],\n\t\t\t\t[ new Date(new Date(Date.parse(\"2020-08-18\")).getFullYear(), new Date(Date.parse(\"2020-08-18\")).getMonth(), new Date(Date.parse(\"2020-08-18\")).getDate()),  36],\n\t\t\t\t[ new Date(new Date(Date.parse(\"2020-08-19\")).getFullYear(), new Date(Date.parse(\"2020-08-19\")).getMonth(), new Date(Date.parse(\"2020-08-19\")).getDate()),  40],\n\t\t\t\t[ new Date(new Date(Date.parse(\"2020-08-20\")).getFullYear(), new Date(Date.parse(\"2020-08-20\")).getMonth(), new Date(Date.parse(\"2020-08-20\")).getDate()),  26],\n\t\t\t\t[ new Date(new Date(Date.parse(\"2020-08-21\")).getFullYear(), new Date(Date.parse(\"2020-08-21\")).getMonth(), new Date(Date.parse(\"2020-08-21\")).getDate()),  26],\n\t\t\t\t[ new Date(new Date(Date.parse(\"2020-08-22\")).getFullYear(), new Date(Date.parse(\"2020-08-22\")).getMonth(), new Date(Date.parse(\"2020-08-22\")).getDate()),  28],\n\t\t\t\t[ new Date(new Date(Date.parse(\"2020-08-23\")).getFullYear(), new Date(Date.parse(\"2020-08-23\")).getMonth(), new Date(Date.parse(\"2020-08-23\")).getDate()),  32],\n\t\t\t\t[ new Date(new Date(Date.parse(\"2020-08-24\")).getFullYear(), new Date(Date.parse(\"2020-08-24\")).getMonth(), new Date(Date.parse(\"2020-08-24\")).getDate()),  36],\n\t\t\t\t[ new Date(new Date(Date.parse(\"2020-08-25\")).getFullYear(), new Date(Date.parse(\"2020-08-25\")).getMonth(), new Date(Date.parse(\"2020-08-25\")).getDate()),  40],\n\t\t\t\t[ new Date(new Date(Date.parse(\"2020-08-26\")).getFullYear(), new Date(Date.parse(\"2020-08-26\")).getMonth(), new Date(Date.parse(\"2020-08-26\")).getDate()),  26],\n\t\t\t\t[ new Date(new Date(Date.parse(\"2020-08-27\")).getFullYear(), new Date(Date.parse(\"2020-08-27\")).getMonth(), new Date(Date.parse(\"2020-08-27\")).getDate()),  32],\n\t\t\t\t[ new Date(new Date(Date.parse(\"2020-08-28\")).getFullYear(), new Date(Date.parse(\"2020-08-28\")).getMonth(), new Date(Date.parse(\"2020-08-28\")).getDate()),  36],\n\t\t\t\t[ new Date(new Date(Date.parse(\"2020-08-29\")).getFullYear(), new Date(Date.parse(\"2020-08-29\")).getMonth(), new Date(Date.parse(\"2020-08-29\")).getDate()),  40],\n\t\t\t\t[ new Date(new Date(Date.parse(\"2020-08-30\")).getFullYear(), new Date(Date.parse(\"2020-08-30\")).getMonth(), new Date(Date.parse(\"2020-08-30\")).getDate()),  26]\n    //   ['City', '2010 Population'],\n    //   ['New York City, NY', 8175000],\n    //   ['Los Angeles, CA', 3792000],\n    //   ['Chicago, IL', 2695000],\n    //   ['Houston, TX', 2099000],\n    //   ['Philadelphia, PA', 1526000],\n    ]}\n    options={{\n      title: 'Population of Largest U.S. Cities',\n      chartArea: { width: '30%' },\n      hAxis: {\n        title: 'Total Population',\n        minValue: 0,\n      },\n      vAxis: {\n        title: 'City',\n      },\n    }}\n    legendToggle\n  />\n \n</div></div>)}\n}\nexport default Graph;"]},"metadata":{},"sourceType":"module"}