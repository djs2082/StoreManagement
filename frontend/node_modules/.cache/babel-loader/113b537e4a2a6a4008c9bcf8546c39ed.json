{"ast":null,"code":"var _jsxFileName = \"/home/dilip/Desktop/MERN/himalaya/src/components/statistics2.component.js\";\nimport React, { Component } from 'react';\nimport '../css/statistics.scss';\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\nclass Graph extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      this.populateArray();\n      setInterval(this.populateArray, 2000);\n    };\n\n    this.populateArray = () => {\n      var data = [],\n          series = 5,\n          serieLength = 5;\n\n      for (var i = series; i--;) {\n        var tmp = [];\n\n        for (var j = serieLength; j--;) {\n          tmp.push(getRandomInt(0, 20));\n        }\n\n        data.push(tmp);\n      }\n\n      this.setState({\n        data: data\n      });\n    };\n\n    this.state = {\n      data: [],\n      series: ['France', 'Italy', 'England', 'Sweden', 'Germany'],\n      labels: ['cats', 'dogs', 'horses', 'ducks', 'cows'],\n      colors: ['#43A19E', '#7B43A1', '#F2317A', '#FF9824', '#58CF6C']\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Charts, {\n      data: this.state.data,\n      labels: this.state.series,\n      colors: this.state.colors,\n      height: 250,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\nclass Legend extends Component {\n  render() {\n    var labels = this.props.labels,\n        colors = this.props.colors;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Legend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    }, labels.map(function (label, labelIndex) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"Legend--color\",\n        style: {\n          backgroundColor: colors[labelIndex % colors.length]\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 19\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"Legend--label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 19\n        }\n      }, label));\n    }));\n  }\n\n}\n\nclass Charts extends Component {\n  render() {\n    var self = this,\n        data = this.props.data,\n        layered = this.props.grouping === 'layered' ? true : false,\n        stacked = this.props.grouping === 'stacked' ? true : false,\n        opaque = this.props.opaque,\n        max = 0;\n\n    for (var i = data.length; i--;) {\n      for (var j = data[i].length; j--;) {\n        if (data[i][j] > max) {\n          max = data[i][j];\n        }\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: 'Charts' + (this.props.horizontal ? ' horizontal' : ''),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, data.map(function (serie, serieIndex) {\n      var sortedSerie = serie.slice(0),\n          sum;\n      sum = serie.reduce(function (carry, current) {\n        return carry + current;\n      }, 0);\n      sortedSerie.sort(compareNumbers);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: 'Charts--serie ' + self.props.grouping,\n        key: serieIndex,\n        style: {\n          height: self.props.height ? self.props.height : 'auto'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }\n      }, self.props.labels[serieIndex]), serie.map(function (item, itemIndex) {\n        var color = self.props.colors[itemIndex],\n            style,\n            size = item / (stacked ? sum : max) * 100;\n        style = {\n          backgroundColor: color,\n          opacity: opaque ? 1 : item / max + .05,\n          zIndex: item\n        };\n\n        if (self.props.horizontal) {\n          style['width'] = size + '%';\n        } else {\n          style['height'] = size + '%';\n        }\n\n        if (layered && !self.props.horizontal) {\n          //console.log(sortedSerie, serie, sortedSerie.indexOf(item));\n          style['right'] = sortedSerie.indexOf(item) / (serie.length + 1) * 100 + '%'; // style['left'] = (itemIndex * 10) + '%';\n        }\n\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: 'Charts--item ' + self.props.grouping,\n          style: style,\n          key: itemIndex,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 26\n          }\n        }, /*#__PURE__*/React.createElement(\"b\", {\n          style: {\n            color: color\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 30\n          }\n        }, item));\n      }));\n    }));\n  }\n\n}\n\nexport default Graph; // React.render(<Graph />, document.getElementById('charts'));","map":{"version":3,"sources":["/home/dilip/Desktop/MERN/himalaya/src/components/statistics2.component.js"],"names":["React","Component","getRandomInt","min","max","Math","floor","random","compareNumbers","a","b","Graph","constructor","props","componentDidMount","populateArray","setInterval","data","series","serieLength","i","tmp","j","push","setState","state","labels","colors","render","Legend","map","label","labelIndex","backgroundColor","length","Charts","self","layered","grouping","stacked","opaque","horizontal","serie","serieIndex","sortedSerie","slice","sum","reduce","carry","current","sort","height","item","itemIndex","color","style","size","opacity","zIndex","indexOf"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport '../css/statistics.scss'\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\nclass Graph extends Component{\n  constructor(props)\n  {\n    super(props)\n    this.state={\n\t\t\tdata: [],\n\t\t\tseries: ['France', 'Italy', 'England', 'Sweden', 'Germany'],\n\t\t\tlabels: ['cats', 'dogs', 'horses', 'ducks', 'cows'],\n\t\t\tcolors: ['#43A19E', '#7B43A1', '#F2317A', '#FF9824', '#58CF6C']\n    }\n  }\n\n\tcomponentDidMount=()=> {\n\t\tthis.populateArray();\n\t\tsetInterval(this.populateArray, 2000);\n\t}\n\n  populateArray=()=> {\n    var data = [],\n        series = 5,\n        serieLength = 5;\n\n    for (var i = series; i--; ) {\n        var tmp = [];\n        \n        for (var j = serieLength; j--; ) {\n            tmp.push(getRandomInt(0, 20));\n        }\n        \n        data.push(tmp);\t\t\t\n    }\n    \n    this.setState({ data: data });\n}\n\t\t\nrender() {\n  return (\n      <section>\n          <Charts\n              data={ this.state.data }\n              labels={ this.state.series }\n              colors={ this.state.colors }\n              height={ 250 }\n          />\n          \n          {/* <Legend labels={ this.state.labels } colors={ this.state.colors } /> */}\n      </section>\n  );\n}\n}\n\nclass Legend extends Component{\n  render() {\n      var labels = this.props.labels,\n          colors = this.props.colors;\n      \n      return (\n      <div className=\"Legend\">\n          { labels.map(function(label, labelIndex) {\n              return (\n              <div>\n                  <span className=\"Legend--color\" style={{ backgroundColor: colors[labelIndex % colors.length]  }} />\n                  <span className=\"Legend--label\">{ label }</span>\n              </div>\n              );\n          }) }\n      </div>\n      );\n  }\n\n}\n\nclass Charts extends Component{\n  render()\n   {\n      var self = this,\n          data = this.props.data,\n          layered = this.props.grouping === 'layered' ? true : false,\n          stacked = this.props.grouping === 'stacked' ? true : false,\n          opaque = this.props.opaque,\n          max = 0;\n      \n      for (var i = data.length; i--; ) {\n          for (var j = data[i].length; j--; ) {\n              if (data[i][j] > max) {\n                  max = data[i][j];\n              }\n          }\n      }\n      return (\n        <div className={ 'Charts' + (this.props.horizontal ? ' horizontal' : '' ) }>\n            { data.map(function (serie, serieIndex) {\n                 var sortedSerie = serie.slice(0),\n                     sum;\n                 \n                 sum = serie.reduce(function (carry, current) {\n                     return carry + current;\n                }, 0);\n                 sortedSerie.sort(compareNumbers);\t\t\t\t \t\t\n                                 \n                return (\n                    <div className={ 'Charts--serie ' + (self.props.grouping) }\n                         key={ serieIndex }\n                        style={{ height: self.props.height ? self.props.height: 'auto' }}\n                    >\n                    <label>{ self.props.labels[serieIndex] }</label>\n                    { serie.map(function (item, itemIndex) {\n                        var color = self.props.colors[itemIndex], style,\n                            size = item / (stacked ? sum : max) * 100;\n                        \n                        style = {\n                            backgroundColor: color,\n                            opacity: opaque ? 1 : (item/max + .05),\n                            zIndex: item\n                        };\n                    \n                        if (self.props.horizontal) {\n                            style['width'] = size + '%';\n                        } else {\t\t\t\t\t\t\t\t\n                            style['height'] = size + '%';\t\t\t\t\t\t\n                        }\n    \n                        if (layered && !self.props.horizontal) {\n                            //console.log(sortedSerie, serie, sortedSerie.indexOf(item));\n                            style['right'] = ((sortedSerie.indexOf(item) / (serie.length + 1)) * 100) + '%';\n                            // style['left'] = (itemIndex * 10) + '%';\n                        }\n                    \n                     return (\n                         <div\n                             className={ 'Charts--item ' + (self.props.grouping) }\n                             style={ style }\n                            key={ itemIndex }\n                        >\n                             <b style={{ color: color }}>{ item }</b>\n                         </div>\n                    );\n                    }) }\n                    </div>\n                );\n            }) }\n        </div>\n    );\n    }\n  \n  }\nexport default Graph\n// React.render(<Graph />, document.getElementById('charts'));"]},"metadata":{},"sourceType":"module"}